// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name iyzicoSDK
import Alamofire
import CommonCrypto
import CommonCrypto.CommonHMAC
import CryptoKit
import Foundation
import Lottie
import SVGKit
import Swift
import UIKit
import WebKit
import _Concurrency
@_exported import iyzicoSDK
public struct PWIAddress {
  public let address: Swift.String?, contactName: Swift.String?, city: Swift.String?, country: Swift.String?
  public init(address: Swift.String?, contactName: Swift.String?, city: Swift.String?, country: Swift.String?)
}
public enum ResultCode : Swift.Int, Swift.CaseIterable {
  case languageError
  case error
  case timeOut
  case phoneError
  case emailError
  case brandError
  case priceError
  case productIDError
  case walletPriceError
  case clientIpError
  case clientIdError
  case clientSecretKeyError
  case baseUrlError
  case merchantApiKeyError
  case merchantSecretKeyError
  case paidPriceError
  case urlCallbackError
  case enabledinstallmentError
  case basketIDError
  case buyerIDError
  case buyerNameError
  case buyerSurnameError
  case buyerIdentityNumberError
  case buyerCityError
  case buyerCountryError
  case buyerEmailError
  case buyerPhoneError
  case buyerIPError
  case buyerRegistrationAddressError
  case closedTransactionError
  case basketProductPriceError
  case basketProductItemTypeError
  case billingContactNameError
  case billingCityError
  case shippingCountryError
  case shippingAddressError
  case emptyBasketError
  case fullBasketError
  case basketProductIdError
  case basketProductNameError
  case basketProductCategoryError
  case billingAdressError
  case shippingContactNameError
  case shippingCityError
  case billingCountryError
  case success
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [iyzicoSDK.ResultCode]
  public typealias RawValue = Swift.Int
  public static var allCases: [iyzicoSDK.ResultCode] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum Language : Swift.String, Swift.CaseIterable {
  case TURKISH
  case ENGLISH
  public init?(rawValue: Swift.String)
  public typealias AllCases = [iyzicoSDK.Language]
  public typealias RawValue = Swift.String
  public static var allCases: [iyzicoSDK.Language] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum Currency : Swift.String, Swift.CaseIterable {
  case TRY
  case USD
  case EUR
  case GBP
  case IRR
  public init?(rawValue: Swift.String)
  public typealias AllCases = [iyzicoSDK.Currency]
  public typealias RawValue = Swift.String
  public static var allCases: [iyzicoSDK.Currency] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum PaymentGroup : Swift.String, Swift.CaseIterable {
  case PRODUCT
  case LISTING
  case SUBSCRIPTION
  case none
  public init?(rawValue: Swift.String)
  public typealias AllCases = [iyzicoSDK.PaymentGroup]
  public typealias RawValue = Swift.String
  public static var allCases: [iyzicoSDK.PaymentGroup] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum BasketItemType : Swift.String, Swift.CaseIterable {
  case PHYSICAL
  case VIRTUAL
  public init?(rawValue: Swift.String)
  public typealias AllCases = [iyzicoSDK.BasketItemType]
  public typealias RawValue = Swift.String
  public static var allCases: [iyzicoSDK.BasketItemType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension UIKit.UIColor {
  @nonobjc public class var clearBlue: UIKit.UIColor {
    get
  }
  @nonobjc public class var darkGrey: UIKit.UIColor {
    get
  }
  @nonobjc public class var blueGrey: UIKit.UIColor {
    get
  }
  @nonobjc public class var gunmetal: UIKit.UIColor {
    get
  }
  @nonobjc public class var silver: UIKit.UIColor {
    get
  }
  @nonobjc public class var paleGrey: UIKit.UIColor {
    get
  }
  @nonobjc public class var white2: UIKit.UIColor {
    get
  }
  @nonobjc public class var yellowOrange: UIKit.UIColor {
    get
  }
  @nonobjc public class var clearBlueTwo: UIKit.UIColor {
    get
  }
  @nonobjc public class var lightSkyBlue: UIKit.UIColor {
    get
  }
  @nonobjc public class var darkGreyWithAlpha08: UIKit.UIColor {
    get
  }
  @nonobjc public class var lineWhite: UIKit.UIColor {
    get
  }
}
public struct IyzicoBasketItem {
  public let id: Swift.String?, price: Swift.String?, name: Swift.String?, category1: Swift.String?
  public let itemType: Swift.String?, subMerchantKey: Swift.String?, subMerchantPrice: Swift.String?
  public init(itemCategory: Swift.String, productId: Swift.String?, itemType: Swift.String, itemName: Swift.String, price: Swift.String?, subMerchantKey: Swift.String?, subMerchantPrice: Swift.String?)
}
@_hasMissingDesignatedInitializers open class StringConstant {
  public static let shared: iyzicoSDK.StringConstant
  final public let frameworkBundle: Swift.String
  final public let externalBorderName: Swift.String
  final public let introTitle: Swift.String
  final public let introBody: Swift.String
  final public let phoneVCTermString: Swift.String
  final public let phoneVCTermHighletedString: Swift.String
  @objc deinit
}
extension iyzicoSDK.StringConstant {
  open func registerFonts()
}
extension Swift.String {
  public var isBackspace: Swift.Bool {
    get
  }
}
extension UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) public func startTimer(time: Swift.Int, completionHandler: ((Swift.Int) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func startTimerWithReturn(time: Swift.Int, completionHandler: ((Swift.Int) -> Swift.Void)? = nil) -> Foundation.Timer
}
@_hasMissingDesignatedInitializers public class Iyzico {
  public static let shared: iyzicoSDK.Iyzico
  weak public static var delegate: iyzicoSDK.IyzicoDelegate?
  @objc deinit
}
extension iyzicoSDK.Iyzico {
  public func startPayWithIyzico(brand: Swift.String, price: Swift.Double, paidPrice: Swift.Double, currency: iyzicoSDK.Currency = Currency.TRY, enabledInstallments: [Swift.Int], basketId: Swift.String, paymentGroup: iyzicoSDK.PaymentGroup? = .PRODUCT, paymentSource: Swift.String, urlCallback: Swift.String, buyerId: Swift.String, buyerName: Swift.String, buyerSurname: Swift.String, buyerIdentityNumber: Swift.String, buyerCity: Swift.String, buyerCountry: Swift.String, buyerEmail: Swift.String, buyerPhone: Swift.String, buyerIp: Swift.String, buyerRegistrationAddress: Swift.String, buyerRegistrationDate: Swift.String, buyerLastLoginDate: Swift.String, billingContactName: Swift.String, billingCity: Swift.String, billingCountry: Swift.String, billingAddress: Swift.String, shippingContactName: Swift.String, shippingCity: Swift.String, shippingCountry: Swift.String, shippingAddress: Swift.String, basketItemList: [iyzicoSDK.IyzicoBasketItem])
  public func startTopUp(buyerEmail: Swift.String, buyerPhone: Swift.String, buyerName: Swift.String? = nil, buyerSurname: Swift.String? = nil)
  public func startCashOut(buyerEmail: Swift.String, buyerPhone: Swift.String, walletPrice: Swift.Double, buyerName: Swift.String? = nil, buyerSurname: Swift.String? = nil)
}
extension iyzicoSDK.Iyzico {
  open func initialize(clientIp: Swift.String, clientId: Swift.String, clientSecret: Swift.String, baseUrl: Swift.String, merchantApiKey: Swift.String? = nil, merchantSecretKey: Swift.String? = nil, language: iyzicoSDK.Language)
}
public struct Buyer {
  public let id: Swift.String?, name: Swift.String?, surname: Swift.String?, identityNumber: Swift.String?
  public let email: Swift.String?, gsmNumber: Swift.String?, registrationAddress: Swift.String?, city: Swift.String?
  public let country: Swift.String?, ip: Swift.String?
  public init(id: Swift.String?, name: Swift.String?, surname: Swift.String?, identityNumber: Swift.String?, email: Swift.String?, gsmNumber: Swift.String?, registrationAddress: Swift.String?, city: Swift.String?, country: Swift.String?, ip: Swift.String?)
}
public protocol IyzicoDelegate : AnyObject {
  func didOperationSuccess(message: Swift.String)
  func didOperationFailed(state: iyzicoSDK.ResultCode, message: Swift.String)
}
public enum Model : Swift.String {
  case simulator, iPhone4, iPhone4S, iPhone5, iPhone5S, iPhone5C, iPhone6, iPhone6Plus, iPhone6S, iPhone6SPlus, iPhoneSE, iPhone7, iPhone7Plus, iPhone8, iPhone8Plus, iPhoneX, iPhoneXS, iPhoneXSMax, iPhoneXR, iPhone11, iPhone11Pro, iPhone11ProMax, iPhoneSE2, iPhone12Mini, iPhone12, iPhone12Pro, iPhone12ProMax, unrecognized
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public var type: iyzicoSDK.Model {
    get
  }
}
extension UIKit.UIResponder {
  @_Concurrency.MainActor(unsafe) public var parentViewController: UIKit.UIViewController? {
    get
  }
}
extension UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) public func securePhoneText(number: Swift.String)
}
extension UIKit.UIFont {
  public class var markProMedium13: UIKit.UIFont {
    get
  }
}
extension UIKit.UIFont {
  public static func registerFont(withFilenameString filenameString: Swift.String, bundle: Foundation.Bundle = Bundle(identifier: StringConstant.shared.frameworkBundle)!)
}
@nonobjc extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func add(_ child: UIKit.UIViewController, containerView: UIKit.UIView? = nil)
  @_Concurrency.MainActor(unsafe) public func remove()
}
extension iyzicoSDK.ResultCode : Swift.Equatable {}
extension iyzicoSDK.ResultCode : Swift.Hashable {}
extension iyzicoSDK.ResultCode : Swift.RawRepresentable {}
extension iyzicoSDK.Language : Swift.Equatable {}
extension iyzicoSDK.Language : Swift.Hashable {}
extension iyzicoSDK.Language : Swift.RawRepresentable {}
extension iyzicoSDK.Currency : Swift.Equatable {}
extension iyzicoSDK.Currency : Swift.Hashable {}
extension iyzicoSDK.Currency : Swift.RawRepresentable {}
extension iyzicoSDK.PaymentGroup : Swift.Equatable {}
extension iyzicoSDK.PaymentGroup : Swift.Hashable {}
extension iyzicoSDK.PaymentGroup : Swift.RawRepresentable {}
extension iyzicoSDK.BasketItemType : Swift.Equatable {}
extension iyzicoSDK.BasketItemType : Swift.Hashable {}
extension iyzicoSDK.BasketItemType : Swift.RawRepresentable {}
extension iyzicoSDK.Model : Swift.Equatable {}
extension iyzicoSDK.Model : Swift.Hashable {}
extension iyzicoSDK.Model : Swift.RawRepresentable {}
